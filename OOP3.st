Object subclass: #MyObject	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP3'!!MyObject methodsFor: 'as yet unclassified' stamp: 'as 12/14/2019 22:59'!foo| var1 |var1 := 2 + 3." just a comment, nothing special "^ (var1 * var1)! !!MyObject methodsFor: 'as yet unclassified' stamp: 'as 12/14/2019 22:57'!foo: a bar:b baz: c| var1 |[a isKindOf: Integer.] ifFalse: [ AssertionFailure signal: 'Type mismatch!! Argument 1 should be Integer' ].[c isKindOf: Number.] ifFalse: [ AssertionFailure signal: 'Type mismatch!! Argument 3 should be Number' ].var1 := a + c." just a comment, nothing special "^ (var1 * var1)! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MyObject class	instanceVariableNames: ''!!MyObject class methodsFor: 'compiling' stamp: 'as 12/14/2019 23:03'!compile: aSourceCode where: anOrderedCollection	|lineTokens numberOfArgs pred args temp updatedCode i errorstring t|		lineTokens := aSourceCode findTokens: (String with: Character cr).		numberOfArgs := (lineTokens at: 1) occurrencesOf: $:.			"checks the number of args at the first line"		pred := numberOfArgs = (anOrderedCollection size).		pred ifFalse: [ AssertionFailure signal: 'Can not compile method, number of arguments is not equal to the number of constraints!!' ].		pred := numberOfArgs = 0.	"check if no arguments"		pred ifTrue: [ ^self compile: aSourceCode notifying: nil ].	"if no arguments compile the code"		temp := lineTokens at:1.	"get first line"		temp := temp copyWithRegex: '[a-zA-Z0-9]*\:' matchesReplacedWith: ''.	"get only args from first line"		args := temp findTokens: (String with: Character space).  		"put every arg seperated by space in a collection"		temp := ''.	"reset the temp string"		i:=1.		[i <= args size.] whileTrue: [		t := (anOrderedCollection at:i).		pred := ((anOrderedCollection at:i) isNil).	"checks if arg can be any type"		pred ifTrue: [i:= i+1].			"if yes skip type checking"		pred ifFalse: [			errorstring := ' ifFalse: [ AssertionFailure signal: ''Type mismatch!! Argument ' , i , ' should be ' , (anOrderedCollection at: i) ,''' ].'. "makes the string for if isKindof is false"				temp := temp , (Character cr) , '[', (args at:i) , ' isKindOf: ' ,(anOrderedCollection at: i) , '.]' , errorstring.   "creates a string checking the types"			i:=i+1.			].		].		updatedCode := ''.		updatedCode := (lineTokens at: 1) , (Character cr)  , (lineTokens at: 2) , temp.					"puts first three lines of the new code"		i:=3.		[i <= lineTokens size.] whileTrue: [		updatedCode := updatedCode , (Character cr) , (lineTokens at: i).								"puts the rest of the code"		i:=i+1.		].	^self compile: updatedCode notifying: nil! !